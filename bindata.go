// Code generated by go-bindata.
// sources:
// map.go.tmpl
// DO NOT EDIT!

package mapgen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mapGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x94\x4d\x6f\xda\x40\x10\x86\xef\xfe\x15\x73\xaa\x70\x84\xec\x7b\xa4\x1c\x2a\xe1\xa2\xa8\x40\xaa\x94\xb4\x87\x28\xaa\x36\xf6\x80\x57\xec\x87\xb5\x3b\x06\x2c\xcb\xff\xbd\x5a\xd6\x4e\x70\xe3\x40\x50\x73\x89\xe2\x9d\x8f\x7d\xdf\x67\x66\x29\x58\xba\x61\x6b\x84\xba\x86\xe8\x47\xfb\x7f\xd3\x04\x41\x7c\x15\x00\x00\x4c\x93\x45\x72\xff\x75\x99\x4c\xe0\xdb\xed\x2c\x19\xc3\xe4\x0e\x16\x77\x4b\x48\x26\xb7\xcb\xe0\x90\xb0\xcc\xb9\x85\x15\x17\x08\x3b\x66\x61\x8d\x0a\x0d\x23\xcc\xe0\xb9\x82\x9c\xa8\xb0\xd7\x71\xbc\xe6\x94\x97\xcf\x51\xaa\x65\xcc\xa4\x64\x86\xeb\x58\xb2\x62\x8d\x2a\xb8\x8a\x83\x20\x8e\xa1\xae\xa3\x39\x2b\x16\x4c\x62\xd3\x00\xb7\xc0\x8e\xfa\x50\x6e\x90\x65\x60\xd9\x0a\x41\xb2\xc2\xa5\xef\x38\xe5\xb0\xc1\xca\xd5\x7d\xc7\x6a\x59\x15\xae\x8e\xa9\x0c\xb6\x4c\x94\xce\x4a\xf4\x8b\x09\x7f\x1c\x50\x55\x60\xff\x02\x4b\xa6\x4c\x09\xea\x83\xfc\xba\x06\xbe\x82\xe8\xc1\xe2\xfd\xef\x79\x49\xb8\x77\xe6\x5d\xc0\x56\x2a\x8d\xda\xb3\x2e\x13\x85\xc5\x5e\xbc\x1f\x55\x59\x17\x3c\xfc\x89\x63\x98\x43\xaa\x15\x31\xae\x2c\x50\x8e\x50\xaa\x0c\x8d\xa8\xb8\x5a\x3b\x2b\x51\x97\x35\xd5\x46\x97\xc4\x15\x5a\xd8\xe5\x3c\xcd\x81\xa5\x29\x5a\x0b\x73\xc8\xb8\xc1\x94\x44\x05\x36\xd7\xa5\xc8\x20\xd7\x22\xeb\xaa\x5c\x43\xe9\xee\xf7\x7d\xe6\xae\xe5\xe3\x31\x91\xa7\x1e\x87\x06\xa0\x65\xed\xfc\x26\xfb\x42\x1b\xc2\xac\x69\x16\xb8\x7b\x75\xa6\xdc\x07\xaa\xac\x69\xea\x9a\x38\x09\x84\x23\x6e\x06\xa9\x34\xca\x02\x53\xc0\x95\x25\xa6\x88\x7f\xca\x84\x56\xa5\x4a\x3f\x2e\x0b\xfa\xba\xa0\x69\x46\x21\x5c\xf5\x06\xec\x27\xeb\xe5\xc2\x97\xe3\x90\x8f\x1c\x70\x5d\x83\x64\x1b\x1c\x9d\x84\x16\x8e\x0f\xf9\x4d\xd0\x1c\xd0\xfd\x44\x02\x8b\xe4\xf6\xd3\x79\xd3\xca\xcf\x80\x15\xde\xc2\x48\xf6\x75\x84\xae\x60\xf4\x2f\x85\xb1\x43\xd0\x03\x10\xb6\x82\x65\x34\xd3\xe9\x66\x14\xb6\x1f\xf3\xc7\x0d\x56\x4f\x70\xe3\xf2\xdb\xa3\x07\x25\x7c\x86\xd7\x33\x41\x81\x84\x60\x50\xea\x2d\x76\xaa\x56\x46\xcb\x73\xba\x7c\xe1\x1b\x69\x83\x42\x32\x9f\x2b\xa3\xf9\xd8\xf5\x0f\x87\xa5\x4c\x91\x1c\x70\xc3\xf1\x32\x25\xd3\x01\x42\x21\x8c\x86\xf0\xbc\xfb\x52\x65\x74\x7f\xa4\x77\x0b\xd7\x37\x2f\xf4\xba\xf8\x8b\xda\x81\x87\xdc\x73\x3b\x54\xfd\xa6\xd8\xbf\xf3\xe3\x25\xdb\xb6\x18\x66\xa8\x5e\x9e\x89\x73\x2e\x50\xad\x29\x07\xbd\x3a\xc7\x61\x86\x6a\x14\x02\x57\x67\x7f\x96\xfa\x66\x95\x93\x2b\x50\xb9\xf1\x84\x17\x9b\x1d\xaa\xfe\x80\x59\xf5\x3a\xf3\x64\x7f\x7a\xea\x71\x7c\x78\xf4\xbb\x1c\x29\x47\x03\x9c\x00\xf7\xdc\x92\x3d\xb1\x0e\xc9\xfe\xdc\x42\x8c\xe1\x59\x6b\x71\xe9\x5a\x8c\xdb\xab\xff\x6f\x3d\x4e\x74\x79\x87\xdc\xf1\x96\x74\xd5\x2d\xc0\xc4\xb7\xea\x16\x86\xaf\x5a\x84\xa7\x19\xf9\xaa\x01\x48\x8e\xca\x65\x50\xfe\x7c\x0a\x94\x53\x5d\xce\x43\xe9\x88\xfc\x0d\x00\x00\xff\xff\xc5\x03\x25\x3c\x88\x08\x00\x00")

func mapGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_mapGoTmpl,
		"map.go.tmpl",
	)
}

func mapGoTmpl() (*asset, error) {
	bytes, err := mapGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "map.go.tmpl", size: 2184, mode: os.FileMode(436), modTime: time.Unix(1497596466, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"map.go.tmpl": mapGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"map.go.tmpl": &bintree{mapGoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

