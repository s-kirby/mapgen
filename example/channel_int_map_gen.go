// Code generated by mapgen (https://github.com/ammario/mapgen), DO NOT EDIT.
package example

import "sync"

// ChannelIntMap is a generated thread safe map
// with key Channel and value int
type ChannelIntMap struct {
	sync.Mutex

	// M contains the underlying map.
	// Goroutines which access M directly should hold
	// the mutex.
	M map[Channel]int
}

// NewChannelIntMap returns an instantiated thread safe map
// with key Channel and value int
func NewChannelIntMap() *ChannelIntMap {
	return &ChannelIntMap{
		M: make(map[Channel]int),
	}
}

// Set sets a key on the map
func (m *ChannelIntMap) Set(key Channel, val int) {
	m.Lock()
	m.M[key] = val
	m.Unlock()
}

// Delete removes a key from the map
func (m *ChannelIntMap) Delete(key Channel) {
	m.Lock()
	delete(m.M, key)
	m.Unlock()
}

// Get retrieves a key from the map
func (m *ChannelIntMap) Get(key Channel) int {

	m.Lock()
	v := m.M[key]
	m.Unlock()

	return v
}

// Len returns the length of the map
func (m *ChannelIntMap) Len() int {

	m.Lock()
	n := len(m.M)
	m.Unlock()

	return n
}

// GetEx retrieves a key from the map
// and whether it exists
func (m *ChannelIntMap) GetEx(key Channel) (int, bool) {

	m.Lock()
	v, exists := m.M[key]
	m.Unlock()

	return v, exists
}

// Exists returns if a key exists
func (m *ChannelIntMap) Exists(key Channel) bool {

	m.Lock()
	_, exists := m.M[key]
	m.Unlock()

	return exists
}
