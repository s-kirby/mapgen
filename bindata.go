// Code generated by go-bindata.
// sources:
// map.go.tmpl
// DO NOT EDIT!

package mapgen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mapGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x94\x5f\x4f\xdb\x3c\x14\xc6\xef\xfb\x29\xce\x7b\xf3\x2e\x99\xaa\xe4\x1e\x89\xab\x51\x21\x34\x5a\x26\x06\xdb\x05\x42\x93\x49\x4e\x1a\xab\xb1\x1d\xd9\x27\x6d\xa3\x2a\xdf\x7d\x3a\x75\xda\x26\x10\x5a\xaa\x71\x83\x88\x7d\xfe\xfe\x9e\xa7\x8e\x63\xf8\x66\x52\x84\x39\x6a\xb4\x82\x30\x85\x97\x1a\x94\x28\xe7\xa8\x21\xc8\x89\x4a\x77\x11\xc7\x73\x49\x79\xf5\x12\x25\x46\xc5\x42\x29\x61\xa5\x89\x7d\x48\x38\x86\xab\x3b\x98\xdd\x3d\xc0\xe4\xea\xe6\x21\x1a\x95\x22\x59\x88\x39\xc2\x66\x03\xd1\x8f\xf6\xff\xa6\x19\x8d\xe2\x18\x36\x9b\x68\x2a\xca\x99\x50\xd8\x34\x20\x1d\x88\x4e\x4b\xca\x2d\x8a\x14\x9c\xc8\x90\x7b\x73\xf8\x4a\x52\x0e\x0b\xac\x39\xef\x3b\xd6\x0f\x75\xc9\x79\x42\xa7\xb0\x14\x45\xc5\x1d\xa2\x5f\xa2\xf0\xc7\x23\xaa\x4b\xec\x37\x70\x64\xab\x84\x60\x33\x02\x00\x9e\x46\x66\x10\x3d\x3a\xbc\xff\x3d\xad\x08\xd7\x3c\x13\x5f\xb8\x5a\x27\x51\x7b\xb6\x8b\xc4\xc2\x61\xef\xbe\x7f\xab\xd3\xdd\xe5\xf6\x4f\x1c\xc3\x14\x12\xa3\x49\x48\xed\x80\x72\x84\x4a\xa7\x68\x8b\x5a\xea\x39\xaf\x12\xed\xa2\xae\x8d\x35\x15\x49\x8d\x0e\x56\xb9\x4c\x72\x10\x49\x82\xce\xc1\x14\x52\x69\x31\xa1\xa2\x06\x97\x9b\xaa\x48\x21\x37\x45\xba\xcb\xe2\x82\x8a\xfb\xfb\x3a\x53\x2e\xf9\xd4\x25\xf2\xdc\xe3\xd0\x00\xb4\xac\x79\xdf\xc9\xba\x34\x96\x30\x6d\x9a\x19\xae\x0e\x9b\x69\xfe\x40\x9d\x36\xcd\x66\x43\x92\x0a\x84\x0e\x37\x8b\x54\x59\xed\x40\x68\x90\xda\x91\xd0\x24\x3f\x45\xa1\xac\xd2\xc9\xc7\xc7\x82\xfe\x5c\xd0\x34\x41\x08\x5f\x7b\x02\x7b\x65\xfd\xb8\xf0\x7f\xf7\xca\xdf\x6c\x71\x5d\x80\x12\x0b\x0c\x8e\x42\x0b\xc7\xdb\xf8\x66\xe4\x6d\xfa\x13\x09\x1c\x12\xfb\x93\x77\x33\xda\x6b\x20\x4a\xbf\x42\xa0\xfa\x73\x84\x9c\x10\xbc\xa6\x30\x66\x04\x3d\x00\x61\x3b\xb0\x8a\x6e\x4d\xb2\x08\xc2\xf6\x63\xfa\xb4\xc0\xfa\x19\x2e\x39\xbe\x3d\x7a\xd4\x85\x8f\xd8\xcf\x73\x93\xcd\x0c\x4d\xd6\xd2\xbd\x33\x19\x9b\x5b\x12\xa4\x06\x9d\xfe\x42\x80\x1c\x19\x71\xee\x0d\xed\xf5\xe4\x50\x2f\x8b\x77\x9f\x74\x5c\x2b\x3a\xb2\xd4\xa1\xeb\xc7\xd6\xeb\x7c\x0d\xed\xba\x1c\x83\x59\xc0\xc5\xe5\x7e\xe9\xed\xa9\xcc\xe0\x3f\xb3\x80\x83\x64\x03\x48\x1a\xef\x90\x43\x0c\x37\xbf\x84\x65\x2b\xdb\x2b\x6a\x1d\x57\x70\x01\x0f\xf1\x0a\x0b\x24\x04\x8b\xca\x2c\x71\x07\x30\xb3\x46\x9d\x12\xd7\x27\xbe\x01\x30\xa8\x66\xea\x63\x55\x34\x1d\x73\xfd\x70\x58\xcf\x6b\xdc\x8a\x62\x25\x9e\x37\xc9\xf5\x80\xcd\x42\x08\x86\x3c\xf6\xee\x73\xa7\xa2\xfb\xae\x22\x6f\xd4\x50\xd1\x7d\x8f\xe3\xab\xd7\xb0\xaf\xe7\x40\xf6\x9b\x64\xff\x58\xf6\x34\x69\x31\xdc\xa2\xee\x79\xb3\x40\x3d\xa7\x1c\x4c\x76\x8a\xc3\x2d\xea\x20\x04\xa9\x4f\xbe\xed\xfd\x65\x35\x8f\x5b\xa0\x66\x79\xc2\xb3\x97\x1d\xca\xfe\xc0\xb2\xfa\xa0\xf9\x64\x7d\x5c\xf5\x38\xde\xbe\x9c\xab\x1c\x29\x47\xcb\x3f\xe7\xed\xcf\xd8\x1d\xb1\xc3\x64\x7d\xca\x10\x63\x78\x31\xa6\x38\xd7\x16\xe3\xb6\xf5\xbf\xd9\xe3\x48\x95\x77\xc8\x75\x5d\xb2\xcb\x6e\x01\x4e\x7c\xa9\x9d\x61\x64\xd6\x22\x3c\xce\xc8\x67\x0d\x40\x62\x2a\xe7\x41\xf9\xf3\x29\x50\x8e\x55\x39\x0d\x65\x4f\xe4\x6f\x00\x00\x00\xff\xff\x79\xe8\xcc\x80\xb3\x09\x00\x00")

func mapGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_mapGoTmpl,
		"map.go.tmpl",
	)
}

func mapGoTmpl() (*asset, error) {
	bytes, err := mapGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "map.go.tmpl", size: 2483, mode: os.FileMode(436), modTime: time.Unix(1497936362, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"map.go.tmpl": mapGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"map.go.tmpl": &bintree{mapGoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

