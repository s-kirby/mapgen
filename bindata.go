// Code generated by go-bindata.
// sources:
// map.go.tmpl
// DO NOT EDIT!

package mapgen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mapGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\xcd\x6e\xf3\x36\x10\xbc\xfb\x29\xb6\x97\x56\x2a\x0c\xea\x1e\x20\xa7\xc6\x08\x82\xc6\x4e\x91\x2f\x5f\x7b\x08\x82\x82\x91\x56\x16\x61\xfe\x08\x24\x65\x5b\x30\xf4\xee\xc5\x8a\xb2\x2d\x25\xb2\x1d\xa3\xb9\x04\x11\xf7\x6f\x76\x66\x48\x27\x09\xfc\x61\x32\x84\x25\x6a\xb4\xdc\x63\x06\xef\x35\x28\x5e\x2e\x51\x43\x54\x78\x5f\xba\x9b\x24\x59\x0a\x5f\x54\xef\x2c\x35\x2a\xe1\x4a\x71\x2b\x4c\x12\x52\xe2\x29\xdc\x3d\xc1\xe2\xe9\x05\x66\x77\x0f\x2f\x6c\x52\xf2\x74\xc5\x97\x08\xbb\x1d\xb0\xbf\xba\xff\x9b\x66\x32\x49\x12\xd8\xed\xd8\x9c\x97\x0b\xae\xb0\x69\x40\x38\xe0\xbd\x91\xbe\xb0\xc8\x33\x70\x3c\x47\x9a\x4d\xe9\x1b\xe1\x0b\x58\x61\x4d\x75\x7f\x62\xfd\x52\x97\x54\xc7\x75\x06\x6b\x2e\x2b\x9a\xc0\xfe\xe6\x32\x1c\x4f\x7c\x5d\xe2\x70\x80\xf3\xb6\x4a\x3d\xec\x26\x00\x40\x68\x44\x0e\xec\xa7\xc3\xe7\x7f\xe6\x95\xc7\x2d\x61\xa2\x80\xab\x75\xca\xba\xb3\x7d\x26\x4a\x87\x83\xf8\x30\xaa\xb3\x7d\xb0\xfd\x93\x24\x30\x87\xd4\x68\xcf\x85\x76\xe0\x0b\x84\x4a\x67\x68\x65\x2d\xf4\x92\x56\x61\xfb\xac\x7b\x63\x4d\xe5\x85\x46\x07\x9b\x42\xa4\x05\xf0\x34\x45\xe7\x60\x0e\x99\xb0\x98\x7a\x59\x83\x2b\x4c\x25\x33\x28\x8c\xcc\xf6\x55\xd4\x50\xd1\xfc\xd0\x67\x4e\x2d\x5f\xfb\x8c\xbc\x0d\x78\x68\x00\x3a\xae\x69\xdf\xd9\xb6\x34\xd6\x63\xd6\x34\x0b\xdc\x1c\x37\xd3\xf4\x81\x3a\x6b\x9a\xdd\xce\x0b\x2f\x11\x7a\xbc\x59\xf4\x95\xd5\x0e\xb8\x06\xa1\x9d\xe7\xda\x8b\x6f\x51\x28\xaf\x74\xfa\x75\x58\x30\xc4\x05\x4d\x13\xc5\xf0\xfb\x40\xe0\xa0\x6c\x80\x0b\xbf\xf6\x43\x21\xd2\xd2\x75\x03\x8a\xaf\x30\x3a\x4b\x5a\x3c\x6d\xf3\x9b\x49\xb0\xe9\x53\x89\x1a\xb8\x94\x66\x43\x16\x4d\xa5\x71\x95\x45\xf0\xa6\x5d\x5d\xd6\x60\xca\xd6\xb3\x60\x74\x10\x87\x97\x61\xb7\x48\x0d\x01\xc6\x6d\xa7\x28\x07\x8a\x46\x71\xdc\x01\x56\xec\xd1\xa4\xab\x28\x6e\x3f\x32\xcc\xd1\x82\x62\x3f\xb5\x3c\x1e\xe6\x51\xdc\x41\xf9\x81\x1e\x1c\x7a\xc2\x41\x34\x5f\x9e\xf8\x03\x7d\xf4\x51\x90\x29\xa9\x31\xd0\x62\x14\x8a\x62\xf3\xd7\x15\xd6\x6f\x70\x4b\xf9\xdd\xd1\x01\xd7\x01\xcf\x43\xbe\x30\x7e\xb6\x15\xee\x04\x32\xba\x67\xc2\x43\x66\xd0\xe9\xdf\x3c\x20\x65\x32\xaa\x7d\xf0\x07\x6b\x51\x6a\x70\x48\xb8\x08\xc2\x51\x2f\x76\x66\xa9\xe3\xd4\xaf\xad\xd7\xfb\x1a\xdb\x75\x3d\x05\xb3\x82\x9b\xdb\xc3\xd2\xed\xa9\xc8\xe1\x17\xb3\x82\xa3\x7b\x46\x28\x69\x82\x59\x8f\x39\x34\xfc\x16\xd6\x9d\x83\x3e\xb0\xd6\x33\x28\x35\x08\x24\xde\xa1\x44\x8f\x60\x51\x99\x35\xee\x09\xcc\xad\x51\x97\xc4\x0d\x85\x9f\x08\x38\x61\xac\x36\x57\xb1\xf9\x94\xfa\xc7\xe3\x7a\xde\x63\x2b\x8a\x15\x78\x1d\x92\xfb\x11\x9b\xc5\x10\x8d\x79\xec\xe4\xcb\xab\xd8\x73\x5f\x91\x4f\x6a\x28\xf6\x3c\xe0\xf1\xc3\xc3\x3c\xd4\x73\xa4\xfa\x53\x71\x78\xb7\x07\x9a\x74\x34\x3c\xa2\x1e\x78\x53\xa2\x5e\xfa\x02\x4c\x7e\x89\x87\x47\xd4\x51\x0c\x42\x5f\xfc\x99\x19\x2e\xab\x09\xae\x44\x4d\xf2\xc4\x57\x2f\x3b\x56\xfd\x85\x65\xf5\x51\xf3\xd9\xf6\xbc\xea\x49\xd2\x3e\xe2\x9b\x02\x7d\x81\x96\xae\x73\x7b\x8d\xdd\x19\x3b\xcc\xb6\x97\x0c\x31\x85\x77\x63\xe4\xb5\xb6\x98\x76\xa3\xff\x9f\x3d\xce\x74\x39\xc1\x5c\xdf\x25\xfb\xea\x8e\xc0\x59\x68\xb5\x37\x8c\xc8\x3b\x0a\xcf\x73\x14\xaa\x46\x48\x22\x56\xae\x23\xe5\xdf\x6f\x21\xe5\x5c\x97\xcb\xa4\x1c\x18\xf9\x2f\x00\x00\xff\xff\x73\xd0\x52\x53\x3e\x0a\x00\x00")

func mapGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_mapGoTmpl,
		"map.go.tmpl",
	)
}

func mapGoTmpl() (*asset, error) {
	bytes, err := mapGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "map.go.tmpl", size: 2622, mode: os.FileMode(436), modTime: time.Unix(1498577925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"map.go.tmpl": mapGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"map.go.tmpl": &bintree{mapGoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

