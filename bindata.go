// Code generated by go-bindata.
// sources:
// map.go.tmpl
// DO NOT EDIT!

package mapgen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mapGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x94\x4d\x4f\xdb\x4c\x10\xc7\xef\xf9\x14\x73\x7a\x64\x3f\x8a\xec\x3b\x12\xa7\x12\xa1\xaa\x18\x2a\x0a\xed\x01\xa1\x6a\xb1\x27\xf1\x2a\xde\x59\x6b\x77\x9c\xc4\xb2\xfc\xdd\xab\xcd\xda\xc1\x2e\x26\x21\x2a\x17\x84\x77\xde\xfe\xf3\x9b\x99\xc4\x31\x7c\xd1\x19\xc2\x0a\x09\x8d\x60\xcc\xe0\xa5\x06\x25\xca\x15\x12\x04\x39\x73\x69\x2f\xe2\x78\x25\x39\xaf\x5e\xa2\x54\xab\x58\x28\x25\x8c\xd4\xb1\x77\x09\xe7\x70\x75\x07\xb7\x77\x0f\xb0\xb8\xfa\xfa\x10\xcd\x4a\x91\xae\xc5\x0a\xa1\x69\x20\xfa\xde\xfd\xdf\xb6\xb3\x59\x1c\x43\xd3\x44\x89\x28\x6f\x85\xc2\xb6\x05\x69\x41\x0c\x4a\x72\x6e\x50\x64\x60\xc5\x12\x5d\x6d\xe7\xbe\x95\x9c\xc3\x1a\x6b\x17\xf7\x0d\xeb\x87\xba\x74\x71\x82\x32\xd8\x88\xa2\x72\x15\xa2\x9f\xa2\xf0\xcf\x33\xae\x4b\x1c\x17\xb0\x6c\xaa\x94\xa1\x99\x01\x80\x53\x23\x97\x10\x3d\x5a\xbc\xff\x95\x54\x8c\x3b\xa7\xc9\x19\x6c\x4d\x69\xd4\xbd\xf5\x9e\x58\x58\x1c\xd9\xc7\x56\xca\x7a\xe3\xfe\x4f\x1c\x43\x02\xa9\x26\x16\x92\x2c\x70\x8e\x50\x51\x86\xa6\xa8\x25\xad\x5c\x2b\x51\xef\x75\xad\x8d\xae\x58\x12\x5a\xd8\xe6\x32\xcd\x41\xa4\x29\x5a\x0b\x09\x64\xd2\x60\xca\x45\x0d\x36\xd7\x55\x91\x41\xae\x8b\xac\x8f\x72\x09\x95\xab\xef\xf3\x24\x2e\xe5\xd3\x90\xc8\xf3\x88\x43\x0b\xd0\xb1\x76\xfd\x2e\x76\xa5\x36\x8c\x59\xdb\xde\xe2\xf6\xb5\x33\x72\x1f\x48\x59\xdb\x36\x0d\x4b\x2e\x10\x06\xdc\x0c\x72\x65\xc8\x82\x20\x90\x64\x59\x10\xcb\x4f\x99\xd0\xb2\xa2\xf4\xe3\xb2\x60\xac\x0b\xda\x36\x08\xe1\xff\xd1\x80\xfd\x64\xbd\x5c\xf8\x6f\x68\xf2\x96\x3d\xae\x0b\x50\x62\x8d\xc1\x51\x68\xe1\x7c\xef\xdf\xce\xfc\x9a\xfe\x40\x06\x8b\xec\xf6\xd3\xf5\xa6\xc9\xcf\x40\x94\xbe\x85\x40\x8d\x75\x84\x2e\x20\xf8\x9b\xc2\xdc\x21\x18\x01\x08\x3b\xc1\x2a\xba\xd1\xe9\x3a\x08\xbb\x8f\xe4\x69\x8d\xf5\x33\x5c\x3a\xff\xee\xe9\x91\x0a\xef\xe1\xf5\x5c\x61\x81\x8c\x60\x50\xe9\x0d\xf6\xaa\x96\x46\xab\x53\xba\x7c\xe0\x1b\x69\x93\x42\x32\xef\xab\xa2\x64\xee\xf2\x87\xd3\x52\xae\x91\x1d\x70\x23\xf1\x3c\x25\xd7\x13\x84\x42\x08\xa6\xf0\xbc\x7b\xa9\x2a\xba\x1f\xe8\xdd\xc0\xc5\xe5\x81\x5e\x6f\x3f\xa8\x9d\x38\xe4\x51\xb7\x53\xd1\x6f\x82\xfd\x9d\x0f\x97\x6c\xd3\x61\xb8\x41\x3a\x9c\x89\xeb\xbc\x40\x5a\x71\x0e\x7a\x79\x8a\xc3\x0d\x52\x10\x82\xa4\x93\x3f\x4b\xe3\x66\xc9\xc9\x2d\x90\xdc\x78\xc2\xb3\x9b\x9d\x8a\xfe\x40\xb3\xf4\x3a\xf3\xc5\xee\xf8\xd4\xe3\x78\x7f\xf4\xdb\x1c\x39\x47\x03\x92\x01\x77\xd2\xb2\x3d\xb2\x0e\x8b\xdd\xa9\x85\x98\xc3\x8b\xd6\xc5\xb9\x6b\x31\xef\x4a\xff\xdb\x7a\x1c\xc9\xf2\x0e\xb9\xe1\x96\xf4\xd1\x1d\xc0\x85\x4f\xd5\x2f\x8c\x5c\x76\x08\x8f\x33\xf2\x51\x13\x90\x1c\x95\xf3\xa0\xfc\xfe\x14\x28\xc7\xb2\x9c\x86\xd2\x13\xf9\x13\x00\x00\xff\xff\x4d\xb9\x40\x20\x6d\x08\x00\x00")

func mapGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_mapGoTmpl,
		"map.go.tmpl",
	)
}

func mapGoTmpl() (*asset, error) {
	bytes, err := mapGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "map.go.tmpl", size: 2157, mode: os.FileMode(436), modTime: time.Unix(1497600305, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"map.go.tmpl": mapGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"map.go.tmpl": &bintree{mapGoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

