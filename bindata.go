// Code generated by go-bindata.
// sources:
// map.go.tmpl
// DO NOT EDIT!

package mapgen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mapGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\x4b\x6f\xab\x46\x14\x5e\xc7\xbf\xe2\x74\xd3\x42\x85\x60\x1f\x29\xab\xc6\x8a\xa2\x86\xa4\xba\x37\xb7\x5d\x44\x57\xd5\x04\x0e\x66\xc4\x3c\xd0\xcc\x60\x1b\x59\xfc\xf7\xea\x30\x10\x9b\xf8\xad\x66\x63\x99\x99\xf3\xfc\x1e\x50\xb3\xac\x62\x0b\x84\xcd\x06\xe2\xbf\x86\xff\x5d\x37\x9b\x25\x09\xfc\xa1\x73\x84\x05\x2a\x34\xcc\x61\x0e\xef\x2d\x48\x56\x2f\x50\x41\x50\x3a\x57\xdb\xdb\x24\x59\x70\x57\x36\xef\x71\xa6\x65\xc2\xa4\x64\x86\xeb\xc4\x87\x84\x11\xdc\xbf\xc0\xf3\xcb\x2b\xcc\xef\x1f\x5f\xe3\xbe\xdc\x66\x13\xa7\xac\x7e\x66\x12\xbb\x0e\xb8\x05\xb6\x53\xdb\x95\x06\x59\x0e\x96\x15\x48\x4d\x28\x7c\xc5\x5d\x09\x15\xb6\x94\xf7\x27\xb6\xaf\x6d\x4d\x79\x4c\xe5\xb0\x64\xa2\xa1\x81\xe3\xbf\x99\xf0\xc7\x33\xd7\xd6\x38\x6d\x60\x9d\x69\x32\x07\x9b\x19\x00\xd0\x72\xbc\x80\xf8\x87\xc5\x6f\xff\xa4\x8d\xc3\x35\xad\x48\x17\xb6\x55\x59\x3c\x9c\x8d\x91\x28\x2c\x4e\xee\xa7\xb7\x2a\x1f\x2f\xfb\x9f\x24\x81\x14\x32\xad\x1c\xe3\xca\x82\x2b\x11\x1a\x95\xa3\x11\x2d\x57\x0b\x5a\x25\x1e\xa3\x1e\xb4\xd1\x8d\xe3\x0a\x2d\xac\x4a\x9e\x95\xc0\xb2\x0c\xad\x85\x14\x72\x6e\x30\x73\xa2\x05\x5b\xea\x46\xe4\x50\x6a\x91\x8f\x59\x54\x50\x52\x7f\x5f\x27\xa5\x92\x6f\xbb\x88\xfc\x9c\xe0\xd0\x01\x0c\x58\xd3\xbe\xf3\x75\xad\x8d\xc3\xbc\xeb\x9e\x71\xb5\xdd\x4c\xd1\x03\xaa\xbc\xeb\x36\x1b\xc7\x9d\x40\xd8\xc1\xcd\xa0\x6b\x8c\xb2\xc0\x14\x70\x65\x1d\x53\x8e\x7f\x09\x43\x45\xa3\xb2\xcb\xc7\x82\xe9\x5c\xd0\x75\x41\x08\xbf\x4f\x08\xf6\xcc\xfa\x71\xe1\xd7\xdd\x2b\x7f\xd3\xc3\x75\x0b\x92\x55\x18\x9c\x04\x2d\x8c\xfa\xf8\x6e\xe6\x55\xff\x52\xa3\x02\x26\x84\x5e\x91\x44\x33\xa1\x6d\x63\x10\x9c\xee\x57\x17\x2d\xe8\xba\xd7\x2c\x68\xe5\xc9\x61\xb5\xdf\x2d\x90\xd3\x01\xc3\xbe\x52\x50\x00\xdd\x06\x61\x38\x0c\x2c\xe3\x27\x9d\x55\x41\xd8\x3f\xe4\x58\xa0\x01\x19\xff\x50\x62\x7b\x58\x04\xe1\x6c\x34\x60\xdd\x7e\x98\xa4\x9f\x86\x0e\x74\x31\x36\x8e\x8f\x75\xa6\xc4\x20\x84\x20\x3b\x2d\x17\x9a\xe9\x26\x83\xbb\x0b\x40\x8a\x40\xa0\x0a\x64\x9c\x86\xe1\x69\x47\xc9\xf8\xdb\xce\x82\x9f\xec\x34\x59\x7e\x6b\xa6\x9b\x42\x1b\xa8\x22\x58\xc2\xed\x1d\x18\xa6\x16\x08\x32\x4e\x69\xb8\x9b\xec\xad\xfa\x09\x77\xb0\x9c\xdd\x74\x67\xfb\x4e\x50\xdc\xeb\xbc\x77\x3b\xf4\x1e\x14\x94\x0d\x98\x7f\x47\x07\x16\x1d\xa1\x4d\xd2\x3e\xcf\xf2\x77\x74\xc1\x67\x13\x44\xe4\x00\xf8\x0c\xf5\x1e\x02\x32\x4e\xdf\x2a\x6c\xfb\x05\x99\xf8\x3c\xe7\xc7\x3c\x8f\xc5\xb3\x76\xf3\x35\xb7\x47\x26\x23\x44\xb8\x83\x5c\xa3\x55\xbf\x39\x40\x8a\x8c\x29\xf7\xd1\x7d\xd8\x99\x42\xbd\x2b\xfd\xcb\x87\x5b\xaa\x75\x54\x40\x93\xae\x97\xad\xb7\xf3\x74\x68\xd7\x65\x04\xba\x22\x7e\xc7\xa5\xfb\x53\x5e\xc0\x2f\xba\x82\xad\x63\x0f\x40\xd2\x79\x22\xb7\x31\xd4\x9c\x24\xe1\x5d\x7b\x80\xdd\x81\x52\x2a\xe0\x41\xbc\x47\x81\x0e\xc1\xa0\xd4\x4b\x1c\x01\x2c\x8c\x96\xe7\xc8\xf5\x89\x7b\x00\x1c\x31\x73\x1f\x2b\xe3\x34\xa2\xfa\xe1\x61\x3e\x1f\xb0\x27\xc5\x70\xbc\x6e\x92\x87\x03\x32\x0b\x21\x38\xa4\xb1\x0b\xbd\xb9\xdc\x63\xe3\xac\x87\xce\x64\x1f\xb1\xd8\x84\x93\x01\x86\x27\x54\x13\x6d\x0a\x54\x0b\x57\xee\xbc\xdb\x8e\xe1\xf0\x84\x2a\x08\x81\xab\xb3\x9f\xf6\xe9\xb2\x8a\xc6\x1d\x5f\x61\x57\x2f\x7b\x28\xfb\x82\x65\xd5\x96\xf3\xf9\xfa\x34\xeb\x49\xd2\x7f\x38\x57\x25\xba\x12\x0d\xd9\xb9\xb7\xb1\x3d\x21\x87\xf9\xfa\x9c\x20\x22\x78\xd7\x5a\x5c\x2b\x8b\x68\x68\xfd\xff\xe4\x71\xa2\xca\x11\xe4\x76\x55\x32\x66\x0f\x00\xce\x7d\xa9\x51\x30\xbc\x18\x20\x3c\x8d\x91\xcf\x3a\x00\x12\xa1\x72\x1d\x28\xff\x7e\x09\x28\xa7\xaa\x9c\x07\xe5\x03\x91\xff\x02\x00\x00\xff\xff\x85\x5d\x2e\x3c\xb3\x0b\x00\x00")

func mapGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_mapGoTmpl,
		"map.go.tmpl",
	)
}

func mapGoTmpl() (*asset, error) {
	bytes, err := mapGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "map.go.tmpl", size: 2995, mode: os.FileMode(420), modTime: time.Unix(1500669028, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"map.go.tmpl": mapGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"map.go.tmpl": &bintree{mapGoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

