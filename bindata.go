// Code generated by go-bindata.
// sources:
// map.go.tmpl
// DO NOT EDIT!

package mapgen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mapGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\x41\x6b\xe3\x3a\x10\xc7\xef\xfe\x14\xff\xd3\x23\x2e\xc1\xbe\x17\x7a\x78\x10\xbf\x50\x5e\x92\x3e\xde\x66\xf7\x52\xca\xa2\xda\x93\x58\x44\x96\x8c\x34\x4e\x62\x8c\xbf\xfb\x22\xdb\xe9\x26\xad\x49\x5a\xd8\x4b\x88\xa4\x99\xd1\x6f\x7e\x23\x97\x22\xdd\x89\x2d\xa1\x69\x10\xfd\x37\xfc\x6f\xdb\x20\x88\xef\x02\x00\x98\x27\xab\xe4\xff\xbf\xd7\xc9\x0c\xff\x3c\x2e\x92\x29\x66\x4f\x58\x3d\xad\x91\xcc\x1e\xd7\x41\x17\xb0\xce\xa5\xc3\x46\x2a\xc2\x41\x38\x6c\x49\x93\x15\x4c\x19\x5e\x6b\xe4\xcc\xa5\xbb\x8f\xe3\xad\xe4\xbc\x7a\x8d\x52\x53\xc4\xa2\x28\x84\x95\x26\x2e\x44\xb9\x25\x1d\xdc\xc5\x41\x10\xc7\x68\x9a\x68\x29\xca\x95\x28\xa8\x6d\x21\x1d\xc4\x59\x1d\xce\x2d\x89\x0c\x4e\x6c\x08\x85\x28\x7d\xf8\x41\x72\x8e\x1d\xd5\x3e\xef\x5f\xaa\xd7\x75\xe9\xf3\x84\xce\xb0\x17\xaa\xf2\xad\x44\x3f\x84\xea\xb7\x03\xae\x4b\xba\xbc\xc0\xb1\xad\x52\x46\xd3\xe1\xbb\x5a\xa7\xd1\xb2\x62\x3a\x76\xcb\xee\x27\x8e\xb1\x44\x6a\x34\x0b\xa9\x1d\x38\x27\x54\x3a\x23\xab\x6a\xa9\xb7\x9e\x21\x3a\x45\xcd\x8d\x35\x15\x4b\x4d\x0e\x87\x5c\xa6\x39\x44\x9a\x92\x73\x58\x22\x93\x96\x52\x56\x35\x5c\x6e\x2a\x95\x21\x37\x2a\x3b\x65\xf9\x82\x85\xbf\xb1\xaf\xb3\xf4\x25\x9f\xcf\x5b\x79\xb9\x68\xa0\x05\x06\x49\x72\x83\x28\x39\x96\xc6\x32\x65\x6d\xbb\xa2\x43\xd3\x80\x94\xf3\xf3\xd2\x7e\x41\x3a\x6b\xdb\xa6\x61\xc9\x8a\x70\xd6\xb0\x25\xae\xac\x76\x10\x1a\x52\x3b\x16\x9a\xe5\x1f\x51\xbb\xa9\x74\xfa\x79\x2c\x5c\x72\xa1\x6d\x27\x21\xee\x2e\x26\xd3\x8f\xa4\xc7\xc5\x5f\xe7\x47\xfd\x49\xa7\xeb\x1e\x85\xd8\xd1\xe4\xaa\xb4\x70\xda\xc5\xb7\x41\xdb\xa9\xfb\x46\x0c\x47\xec\x1f\x96\xef\xcd\xe8\x7e\x06\xa2\xec\x5b\x98\x14\x97\x1c\xa1\x4f\x98\xbc\xb7\x30\xf5\x0a\x2e\x04\x84\x03\x70\x11\x2d\x4c\xba\x9b\x84\xc3\x62\xf9\xbc\xa3\xfa\x05\x0f\x3e\x7e\xd8\xfa\xae\x55\x1f\xd1\xf3\xcc\x48\x11\x13\x2c\x15\x66\x4f\x27\xaa\x8d\x35\xc5\x2d\xae\x3e\xf1\x03\xda\x28\x48\xd6\xc7\x16\xd1\x72\xea\xeb\x87\xe3\x28\x73\x62\x2f\xdc\x4a\xfa\x1a\xc9\x7c\xc4\x50\x88\xc9\x4d\x3d\x7b\xdc\x3f\xbc\x39\x7a\x8f\x74\x36\xfd\xfd\xc0\xb7\x20\xfd\xf6\x7e\x3d\x92\x22\xbd\xe5\x1c\x66\x73\x0b\x70\x41\x7a\x12\x42\x6a\x1e\xa3\xd0\x9e\x42\x91\xf6\x76\x3e\x88\x39\xa3\xd0\xbf\x2d\x25\xc7\xeb\x9e\xe2\xb8\xfb\x4c\x0e\x39\x71\x4e\x16\x92\x41\x47\xe9\xd8\x5d\x11\x98\x1c\x6f\x29\x9c\xe2\xd5\x18\x35\x2e\x72\x3a\x5c\xf0\x59\xa1\xa7\xf8\xa1\xa5\xa4\x4f\x3e\xb9\x95\x9b\xa1\xa9\xeb\xd4\x7d\xd6\x08\xb6\xe7\x1c\xc3\xfc\xf9\x45\xcc\x13\xe3\xaf\x00\x00\x00\xff\xff\x18\x01\xac\xcc\x97\x06\x00\x00")

func mapGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_mapGoTmpl,
		"map.go.tmpl",
	)
}

func mapGoTmpl() (*asset, error) {
	bytes, err := mapGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "map.go.tmpl", size: 1687, mode: os.FileMode(436), modTime: time.Unix(1497588146, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"map.go.tmpl": mapGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"map.go.tmpl": &bintree{mapGoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

