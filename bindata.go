// Code generated by go-bindata.
// sources:
// map.go.tmpl
// DO NOT EDIT!

package mapgen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mapGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\x4d\x6f\x9b\x40\x10\x86\xef\xfc\x8a\xf7\x54\x41\x64\xc1\x3d\x52\x0e\x95\x4c\xa3\xa8\x89\x53\x35\x6e\x2f\x51\x54\x6d\xf0\x60\x56\x66\x17\xc4\x0e\xb6\x11\xe2\xbf\x57\xcb\x47\x0a\xad\xb1\x13\xa9\x37\x7b\x99\x8f\x67\x9e\xd9\xcd\x45\xb4\x13\x5b\x42\x5d\xc3\xff\xd6\xff\x6e\x1a\xc7\x09\xae\x1c\x00\xb8\x0d\x57\xe1\xf7\xcf\xeb\x70\x89\x2f\x77\xf7\xe1\x02\xcb\x47\xac\x1e\xd7\x08\x97\x77\x6b\xa7\x0d\x58\x27\xd2\x20\x96\x29\xe1\x20\x0c\xb6\xa4\xa9\x10\x4c\x1b\xbc\x56\x48\x98\x73\x73\x1d\x04\x5b\xc9\x49\xf9\xea\x47\x99\x0a\x84\x52\xa2\x90\x59\xa0\x44\xbe\x25\xed\x5c\x05\x8e\x13\x04\xa8\x6b\xff\x41\xe4\x2b\xa1\xa8\x69\x20\x0d\xc4\xa8\x0e\x27\x05\x89\x0d\x8c\x88\x09\x4a\xe4\x36\xfc\x20\x39\xc1\x8e\x2a\x9b\xf7\x95\xaa\x75\x95\xdb\x3c\xa1\x37\xd8\x8b\xb4\xb4\xa3\xf8\x3f\x45\xda\x1d\x3b\x5c\xe5\x34\x6d\x60\xb8\x28\x23\x46\xdd\xe2\xab\x12\xa6\xd2\x91\xff\x50\x32\x1d\xbb\x13\xdb\xe6\x79\x5c\xfa\x65\x52\xb0\x01\x7a\x68\x19\xc3\x0f\x8f\x79\x56\x30\x6d\x9a\x66\x45\x87\xba\x06\xa5\xc6\xfa\xd3\xf6\x0f\xe9\x4d\xd3\xd4\x35\x4b\x4e\x09\x23\x80\x82\xb8\x2c\xb4\x81\xd0\x90\xda\xb0\xd0\x2c\xff\xcb\xa8\x71\xa9\xa3\xf7\x63\x61\xca\x85\xa6\x71\x3d\x5c\x4d\x4c\x75\x8a\x3a\x5c\x7c\x1a\x7f\xea\xbe\xb4\xba\xae\xa1\xc4\x8e\xdc\xb3\xd2\xbc\x45\x1b\xdf\x38\x4d\xab\xee\x3e\x8b\x76\x48\xb3\x68\x67\xc0\x49\x3b\x6b\x3b\xd2\xe0\x45\xb2\xdf\xcd\xe2\xaa\x29\x90\xd7\x66\xba\xde\xf9\x0d\x0d\x9b\xf5\x55\xe9\x77\xf1\xe3\x31\x94\xaf\x7a\x8a\x1f\xda\x22\xa0\xd4\x13\x92\xb9\xce\x5d\xb4\xeb\x8d\xab\x0f\x67\x7d\xc1\x27\x62\x18\x62\x7b\x7f\xed\xca\x32\x7d\xa9\xe6\x13\xb1\xfb\xf7\x72\x17\x76\xb3\x93\xbd\x7a\x33\x03\x29\x5f\x3d\xef\xa8\x7a\xc1\x8d\x4d\x99\xa5\x5a\x52\x4a\x4c\x28\x48\x65\x7b\x1a\xd8\xe2\x22\x53\x97\xe8\xba\xc4\x7f\x00\xe7\x70\x36\x5d\xb8\xf2\xd5\xc2\xb6\xf0\x66\x81\x6e\x89\xed\x32\x0a\x49\x1f\xe3\xb9\x3d\x61\xcb\x83\xfb\x1e\x55\x7b\x5c\xdf\xbc\xf9\x3a\x01\x36\xba\x1f\xfb\xe1\x8e\x92\x7e\xbb\x90\x16\x2c\x25\xbd\xe5\x04\x59\x7c\x09\xf3\x9e\xb4\xeb\x41\x6a\x9e\x61\xd1\x96\x25\x25\x6d\x4d\x9d\x92\x34\x62\xd1\x7f\x8c\x85\xc7\xf3\xce\x82\xa0\x7d\x42\x87\x84\x38\xa1\x02\x92\x41\x47\x69\xd8\x9c\x91\x19\x1e\x2f\xe9\x5c\xe0\x35\xcb\xd2\x59\xa9\x8b\xbe\xc7\x07\xe4\x0e\x29\xfd\x60\x61\x97\xff\xf6\xf0\xe3\x7e\xb4\xf3\xec\x5d\xd6\x09\x78\x4b\x3b\x03\xfb\xeb\xe3\xb0\x03\xe9\xef\x00\x00\x00\xff\xff\x06\x09\xa6\x6e\x22\x07\x00\x00")

func mapGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_mapGoTmpl,
		"map.go.tmpl",
	)
}

func mapGoTmpl() (*asset, error) {
	bytes, err := mapGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "map.go.tmpl", size: 1826, mode: os.FileMode(436), modTime: time.Unix(1497586624, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"map.go.tmpl": mapGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"map.go.tmpl": &bintree{mapGoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

