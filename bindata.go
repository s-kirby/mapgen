// Code generated by go-bindata.
// sources:
// map.go.tmpl
// DO NOT EDIT!

package mapgen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mapGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\x51\x6f\x9b\x30\x10\xc7\xdf\xf9\x14\xf7\x34\x41\x85\xcc\x7b\xa4\x3e\x4c\x0a\x8b\xaa\xb5\xe9\xb4\x66\x7b\xa9\xaa\xc9\x21\x97\x60\x81\x0d\xc2\x47\x12\x14\xf1\xdd\x27\xdb\xd0\x41\x17\x92\x45\xda\x5b\x64\xee\x7f\xf7\xfb\xf9\x9c\x92\x27\x19\xdf\x21\x9c\x4e\xc0\xbe\x75\xbf\xdb\xd6\xf3\xa2\x3b\x0f\x00\x60\x11\x2f\xe3\xef\x9f\x57\xf1\x1c\xbe\x3c\x3c\xc6\x21\xcc\x9f\x61\xf9\xbc\x82\x78\xfe\xb0\xf2\x6c\xc1\x2a\x15\x1a\xb6\x22\x47\x38\x70\x0d\x3b\x54\x58\x71\xc2\x0d\xac\x1b\x48\x89\x4a\x3d\x8b\xa2\x9d\xa0\xb4\x5e\xb3\xa4\x90\x11\x97\x92\x57\xa2\x88\x24\x2f\x77\xa8\xbc\xbb\xc8\xf3\xa2\x08\x4e\x27\xf6\xc4\xcb\x25\x97\xd8\xb6\x20\x34\xf0\x41\x1f\x4a\x2b\xe4\x1b\xd0\x7c\x8b\x20\x79\x69\xca\x0f\x82\x52\xc8\xb0\x31\xb9\xaf\xd8\xac\x9a\xd2\xe4\xb8\xda\xc0\x9e\xe7\xb5\x51\x61\x3f\x79\xee\x8e\x3d\x6a\x4a\x1c\x0f\xd0\x54\xd5\x09\xc1\xc9\xe2\xcb\x1a\x74\xa3\x12\xf6\x54\x13\x1e\xdd\x89\x19\xf3\x3a\x6c\xfd\x36\x6a\xd8\x02\x58\xe8\x25\x1e\x46\x6d\x2b\xa4\xba\x52\x1a\xb8\x02\xa1\x34\x71\x45\xe2\xbf\x08\x6c\x6b\x95\x7c\x1c\xe6\x07\x70\x37\x1a\xee\x64\x1c\x02\x7c\x1a\x7e\x72\x5f\xac\xd8\x0c\x24\xcf\xd0\xbf\xa8\x17\x84\xb6\xbe\xf5\x5a\x2b\xf9\x58\x24\x19\xe4\x45\x92\x69\xa0\xd4\xf2\x5b\xcc\xde\x55\x10\x73\x7c\xbe\x1c\x03\x05\x36\xe9\x07\x97\xef\xb2\xdf\x01\x93\x35\x73\xf5\x43\x0d\xc9\x64\x47\xf1\x43\x19\x04\xa8\xd5\x88\x64\x6a\xb2\xab\xf6\x83\x61\xf7\xfe\xac\x6b\xf8\x82\x04\x1a\xc9\xbc\x34\xb3\x86\x42\x5d\xeb\xf9\x82\xe4\x7f\x5c\x58\x68\xb6\x35\xda\x55\x30\x21\x24\x99\x7c\xcd\xb0\x79\x83\x7b\x13\x99\xa4\x9a\x63\x8e\x84\x50\xa1\x2c\xf6\xd8\xb3\x6d\xab\x42\x5e\xa3\x73\xc1\xbf\x00\xa7\x70\x36\xae\x5c\x32\x19\x9a\x11\xc1\x24\xd0\x02\xc9\x2c\xa3\x12\x78\x1b\xcf\xe2\xcc\x6d\x05\xe0\xff\xcb\x55\xed\x61\x76\xff\x7e\x5f\x67\xc0\x06\xef\x63\xff\x87\x32\x3e\x5e\xe6\x8c\x22\xfb\x6c\x0f\x29\x52\x8a\x15\x08\x02\x3c\x0a\x4d\xfa\x82\x40\x7c\xbc\xa6\x10\xc2\xba\x28\xf2\x49\x91\xb0\x9b\x71\x83\x50\x1f\xe9\xc4\x62\x97\x7f\xff\xb3\x6d\x3b\xb5\xcb\xec\x2e\x75\x06\xde\xd0\x4e\xc0\xfe\xba\x1d\xb6\x27\xfd\x1d\x00\x00\xff\xff\x8b\x45\xe8\x64\x40\x06\x00\x00")

func mapGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_mapGoTmpl,
		"map.go.tmpl",
	)
}

func mapGoTmpl() (*asset, error) {
	bytes, err := mapGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "map.go.tmpl", size: 1600, mode: os.FileMode(436), modTime: time.Unix(1497584393, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"map.go.tmpl": mapGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"map.go.tmpl": &bintree{mapGoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

